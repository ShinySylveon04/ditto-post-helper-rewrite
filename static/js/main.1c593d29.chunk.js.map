{"version":3,"sources":["components/Appbar.js","components/Stepper.js","layouts/MainLayout.js","redux/types.js","pages/Ditto.js","redux/actions.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","grow","Appbar","classes","className","AppBar","position","Toolbar","Typography","align","variant","color","IconButton","target","href","paddingLeft","paddingRight","Stepper","steps","activeStep","alternativeLabel","orientation","map","label","Step","key","StepLabel","margin","width","MainLayout","children","SET_ACTIVE_STEP","SET_DITTO_NATURE","SET_DEPOSIT","SET_PLAYER","theme","paper","maxWidth","padding","display","flexDirection","alignItems","formControl","spacing","minWidth","button","marginTop","natures","games","createMenuItems","list","listItem","MenuItem","value","mapDispatchToProps","setDittoNature","type","setPlayer","prop","setDeposit","connect","dittoNature","game","player","props","Paper","elevation","FormControl","InputLabel","id","Select","labelId","fullWidth","onChange","event","Button","endIcon","disabled","isEmpty","stepNames","setActiveStep","Ditto","Boolean","window","location","hostname","match","store","createStore","state","deposit","gender","nickname","level","language","inGameName","gtsMessage","consoleRegion","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c593d29.chunk.js","sourcesContent":["import React from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport AppBarBase from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport GithubCircle from \"mdi-material-ui/GithubCircle\";\nimport Reddit from \"mdi-material-ui/Reddit\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  }\n});\n\nexport default function Appbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBarBase position=\"static\">\n        <Toolbar>\n          <Typography\n            align=\"left\"\n            variant=\"h6\"\n            color=\"inherit\"\n            className={classes.grow}\n          >\n            Ditto Post Helper\n          </Typography>\n          <IconButton\n            target=\"_blank\"\n            href=\"https://www.reddit.com/r/morebreedingdittos/\"\n          >\n            <Reddit color=\"inherit\" />\n          </IconButton>\n          <IconButton\n            target=\"_blank\"\n            href=\"https://github.com/ShinySylveon04/ditto-post-helper\"\n          >\n            <GithubCircle color=\"inherit\" />\n          </IconButton>\n        </Toolbar>\n      </AppBarBase>\n    </div>\n  );\n}\n","import React from \"react\";\nimport StepperContainer from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingLeft: 0,\n    paddingRight: 0\n  }\n});\n\nexport default function Stepper({ steps, activeStep }) {\n  const classes = useStyles();\n  return (\n    <StepperContainer\n      alternativeLabel\n      activeStep={activeStep}\n      classes={classes}\n      orientation=\"horizontal\"\n    >\n      {steps.map(label => (\n        <Step key={label}>\n          <StepLabel>{label}</StepLabel>\n        </Step>\n      ))}\n    </StepperContainer>\n  );\n}\n","import React from \"react\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\nconst useStyles = makeStyles({\n  root: {\n    margin: \"10px auto\",\n    width: \"90%\"\n  }\n});\n\nexport default function MainLayout({ children }) {\n  const classes = useStyles();\n  return <div className={classes.root}>{children}</div>;\n}\n","export const SET_ACTIVE_STEP = \"SET_ACTIVE_STEP\";\nexport const SET_DITTO_NATURE = \"SET_DITTO_NATURE\";\nexport const SET_DEPOSIT = \"SET_DEPOSIT\";\nexport const SET_PLAYER = \"SET_PLAYER\";\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport map from \"lodash/map\";\nimport isEmpty from \"lodash/isEmpty\";\n\nimport { connect } from \"react-redux\";\nimport { setDittoNature, setDeposit, setPlayer } from \"../redux/actions\";\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    maxWidth: \"380px\",\n    margin: \"10px auto\",\n    padding: \"20px 40px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 130,\n    maxWidth: 150,\n    width: \"100%\"\n  },\n  button: {\n    marginTop: 20\n  }\n}));\n\nconst natures = [\n  \"Adamant\",\n  \"Brave\",\n  \"Bold\",\n  \"Relaxed\",\n  \"Impish\",\n  \"Timid\",\n  \"Jolly\",\n  \"Naive\",\n  \"Modest\",\n  \"Quiet\",\n  \"Calm\",\n  \"Sassy\",\n  \"Careful\",\n  \"HP Fighting\",\n  \"HP Fire\",\n  \"HP Flying\",\n  \"HP Grass\",\n  \"HP Ground\",\n  \"HP Ice\",\n  \"HP Rock\"\n];\n\nconst games = [\"ORAS\", \"XY\", \"Sun/Moon\", \"Ultra Sun/Ultra Moon\"];\n\nfunction createMenuItems(list) {\n  return map(list, listItem => {\n    return (\n      <MenuItem value={listItem} key={listItem}>\n        {listItem}\n      </MenuItem>\n    );\n  });\n}\n\nexport function DittoPage(props) {\n  const classes = useStyles();\n\n  const { setDittoNature, setPlayer } = props;\n  const { dittoNature, game } = props;\n\n  return (\n    <Paper className={classes.paper} elevation={0}>\n      <Typography variant=\"h4\" color=\"textPrimary\">\n        Choose a Ditto\n      </Typography>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"nature-label\">Nature</InputLabel>\n        <Select\n          labelId=\"nature-label\"\n          id=\"nature\"\n          value={dittoNature}\n          fullWidth\n          onChange={event => setDittoNature(event.target.value)}\n        >\n          {createMenuItems(natures)}\n        </Select>\n      </FormControl>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"game-label\">Game Version</InputLabel>\n        <Select\n          labelId=\"game-label\"\n          id=\"game\"\n          value={game}\n          onChange={event => setPlayer(\"game\", event.target.value)}\n        >\n          {createMenuItems(games)}\n        </Select>\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        endIcon={<SendIcon />}\n        disabled={isEmpty(dittoNature) || isEmpty(game) ? true : false}\n      >\n        GTS Deposit\n      </Button>\n    </Paper>\n  );\n}\n\nconst mapStateToProps = ({ dittoNature, player }) => ({\n  dittoNature: dittoNature,\n  game: player.game\n});\n\nconst mapDispatchToProps = {\n  setDittoNature,\n  setPlayer,\n  setDeposit\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DittoPage);\n","import {\n  SET_ACTIVE_STEP,\n  SET_DITTO_NATURE,\n  SET_DEPOSIT,\n  SET_PLAYER\n} from \"./types\";\n\nexport function setActiveStep(value) {\n  return { type: SET_ACTIVE_STEP, value };\n}\n\nexport function setDittoNature(value) {\n  return { type: SET_DITTO_NATURE, value };\n}\n\nexport function setDeposit(prop, value) {\n  return { type: SET_DEPOSIT, value: { prop, value } };\n}\n\nexport function setPlayer(prop, value) {\n  return { type: SET_PLAYER, value: { prop, value } };\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Appbar from \"./components/Appbar\";\nimport Stepper from \"./components/Stepper\";\n\nimport MainLayout from \"./layouts/MainLayout\";\n\nimport DittoPage from \"./pages/Ditto\";\n\nimport { connect } from \"react-redux\";\nimport { setActiveStep } from \"./redux/actions\";\n\nconst stepNames = [\n  \"Pick your Ditto\",\n  \"GTS Deposit\",\n  \"Player Info\",\n  \"Copy and submit\"\n];\n\nexport function App({ activeStep }) {\n  return (\n    <div className=\"App\">\n      <Appbar />\n      <MainLayout>\n        <Stepper activeStep={activeStep} steps={stepNames} />\n        <DittoPage />\n      </MainLayout>\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ activeStep }) => ({\n  activeStep: activeStep\n});\n\nconst mapDispatchToProps = {\n  setActiveStep\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SET_ACTIVE_STEP,\n  SET_DITTO_NATURE,\n  SET_DEPOSIT,\n  SET_PLAYER\n} from \"./types\";\n\nexport const appReducer = (state, { type, value }) => {\n  switch (type) {\n    case SET_ACTIVE_STEP:\n      return { ...state, activeStep: value };\n    case SET_DITTO_NATURE:\n      return { ...state, dittoNature: value };\n    case SET_DEPOSIT:\n      return {\n        ...state,\n        deposit: { ...state.deposit, [value.prop]: value.value }\n      };\n    case SET_PLAYER:\n      return {\n        ...state,\n        player: { ...state.player, [value.prop]: value.value }\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\n// import { ORASTrainers } from \"./utils/oras-trainers\";\n// import { gen6Pokemon } from \"./utils/pokemon-deposits\";\n// import { pokeballs } from \"./utils/pokeballs\";\nimport { appReducer } from \"./reducers\";\n\nexport const initialState = {\n  activeStep: 0,\n  dittoNature: \"\",\n  deposit: {\n    //species: gen6Pokemon[0],\n    //ball: pokeballs[0],\n    gender: \"Male\",\n    nickname: \"\",\n    level: 0\n  },\n  player: {\n    language: \"English\",\n    game: \"\",\n    //trainerDescription: ORASTrainers[0].name,\n    inGameName: \"\",\n    gtsMessage: \"\",\n    consoleRegion: \"\"\n  }\n};\n\nexport const store = createStore(appReducer, initialState);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}